[
  {
    "scope": "http://localhost:11434",
    "method": "POST",
    "path": "/api/chat",
    "body": {
      "model": "llama3.1:8b",
      "messages": [
        {
          "role": "system",
          "content": "You are QCode, an AI coding assistant. You have access to file operation tools to help users with their coding tasks.\n\nAvailable tools:\n- internal:files: Perform file operations including read, write, list, and search files within the workspace\n\nWhen a user asks about files, use the appropriate tool to help them. Always use function calling when file operations are needed.\n\nFor file paths, assume they are relative to the current workspace unless otherwise specified.\n\nIMPORTANT for the 'files' tool operations:\n- For list operation: Use 'path' parameter for the directory, 'pattern' for glob patterns like \"*.swift\", \"**/*.ts\"\n- For read operation: Use 'path' parameter for the file path, 'startLine' and 'endLine' for ranges\n- For search operation: Use 'pattern' for text/regex to search, 'path' for directory scope\n\nFor multi-step queries like \"list files and then read the first one\", break this down into steps:\n1. First, call the list function to get files\n2. Then, based on the results, call read function for a specific file\n\nContinue calling functions until the user's request is fully satisfied."
        },
        {
          "role": "user",
          "content": "\n          I need you to analyze this TypeScript project:\n          1. First, find and read package.json to understand dependencies\n          2. Then look at the source code structure in src/\n          3. Finally, give me a summary of the project architecture and any potential issues\n        "
        }
      ],
      "stream": false,
      "format": "json",
      "options": {
        "temperature": 0.1
      },
      "tools": [
        {
          "type": "function",
          "function": {
            "name": "internal:files",
            "description": "Perform file operations including read, write, list, and search files within the workspace",
            "parameters": {
              "type": "object",
              "properties": {
                "operation": {
                  "type": "string",
                  "enum": ["read", "write", "list", "search"],
                  "description": "The type of file operation to perform"
                },
                "path": {
                  "type": "string",
                  "description": "For read/write: file path. For list: directory path to search in (default: current directory)"
                },
                "content": {
                  "type": "string",
                  "description": "Content to write (for write operation)"
                },
                "query": {
                  "type": "string",
                  "description": "Search query text or pattern (for search operation)"
                },
                "pattern": {
                  "type": "string",
                  "description": "Glob pattern to filter files (e.g., \"**/*.ts\", \"*.swift\"). Use this to find files by extension or name pattern."
                },
                "startLine": {
                  "type": "number",
                  "description": "Starting line number for partial file read (1-indexed)"
                },
                "endLine": {
                  "type": "number",
                  "description": "Ending line number for partial file read (1-indexed, inclusive)"
                },
                "recursive": {
                  "type": "boolean",
                  "description": "Whether to search/list recursively in subdirectories",
                  "default": false
                },
                "includeHidden": {
                  "type": "boolean",
                  "description": "Whether to include hidden files (starting with .)",
                  "default": false
                },
                "includeMetadata": {
                  "type": "boolean",
                  "description": "Whether to include file metadata (size, dates, permissions)",
                  "default": false
                },
                "useRegex": {
                  "type": "boolean",
                  "description": "Whether to treat search query as a regular expression",
                  "default": false
                },
                "caseSensitive": {
                  "type": "boolean",
                  "description": "Whether search should be case sensitive",
                  "default": false
                },
                "backup": {
                  "type": "boolean",
                  "description": "Whether to create backup before overwriting files",
                  "default": true
                },
                "createDirs": {
                  "type": "boolean",
                  "description": "Whether to create parent directories if they don't exist",
                  "default": true
                },
                "encoding": {
                  "type": "string",
                  "enum": ["utf8", "utf-8", "ascii", "base64", "hex"],
                  "description": "File encoding for read/write operations",
                  "default": "utf8"
                },
                "maxResults": {
                  "type": "number",
                  "description": "Maximum number of search results to return",
                  "default": 100
                },
                "includeContext": {
                  "type": "boolean",
                  "description": "Whether to include context lines around search matches",
                  "default": true
                }
              },
              "required": ["operation"],
              "additionalProperties": false
            }
          }
        }
      ]
    },
    "status": 200,
    "response": {
      "model": "llama3.1:8b",
      "created_at": "2025-06-03T22:19:51.085154Z",
      "message": {
        "role": "assistant",
        "content": "",
        "tool_calls": [
          {
            "function": {
              "name": "internal:files",
              "arguments": {
                "encoding": "utf8",
                "operation": "read",
                "path": "package.json"
              }
            }
          }
        ]
      },
      "done_reason": "stop",
      "done": true,
      "total_duration": 1114011875,
      "load_duration": 11652875,
      "prompt_eval_count": 833,
      "prompt_eval_duration": 300724833,
      "eval_count": 32,
      "eval_duration": 800314667
    },
    "rawHeaders": {
      "content-length": "422",
      "content-type": "application/json; charset=utf-8",
      "date": "Tue, 03 Jun 2025 22:19:51 GMT"
    },
    "responseIsBinary": false
  },
  {
    "scope": "http://localhost:11434",
    "method": "POST",
    "path": "/api/chat",
    "body": {
      "model": "llama3.1:8b",
      "messages": [
        {
          "role": "system",
          "content": "You are QCode, an AI coding assistant. You have access to file operation tools to help users with their coding tasks.\n\nAvailable tools:\n- internal:files: Perform file operations including read, write, list, and search files within the workspace\n\nWhen a user asks about files, use the appropriate tool to help them. Always use function calling when file operations are needed.\n\nFor file paths, assume they are relative to the current workspace unless otherwise specified.\n\nIMPORTANT for the 'files' tool operations:\n- For list operation: Use 'path' parameter for the directory, 'pattern' for glob patterns like \"*.swift\", \"**/*.ts\"\n- For read operation: Use 'path' parameter for the file path, 'startLine' and 'endLine' for ranges\n- For search operation: Use 'pattern' for text/regex to search, 'path' for directory scope\n\nFor multi-step queries like \"list files and then read the first one\", break this down into steps:\n1. First, call the list function to get files\n2. Then, based on the results, call read function for a specific file\n\nContinue calling functions until the user's request is fully satisfied."
        },
        {
          "role": "user",
          "content": "\n          I need you to analyze this TypeScript project:\n          1. First, find and read package.json to understand dependencies\n          2. Then look at the source code structure in src/\n          3. Finally, give me a summary of the project architecture and any potential issues\n        "
        },
        {
          "role": "assistant",
          "content": "\n📄 **/Users/qmx/dev/qcode/package.json** (74 lines) (1945 bytes)\n```\n{\n  \"name\": \"qcode\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Enterprise-grade TypeScript-based AI coding assistant with zero API costs and full privacy control\",\n  \"main\": \"dist/index.js\",\n  \"bin\": {\n    \"qcode\": \"dist/cli.js\"\n  },\n  \"scripts\": {\n    \"build\": \"tsc\",\n    \"dev\": \"tsc --watch\",\n    \"start\": \"node dist/cli.js\",\n    \"test\": \"jest\",\n    \"test:watch\": \"jest --watch\",\n    \"test:coverage\": \"jest --coverage\",\n    \"lint\": \"eslint 'src/**/*.ts' --max-warnings 0\",\n    \"lint:fix\": \"eslint 'src/**/*.ts' --fix\",\n    \"format\": \"prettier --write .\",\n    \"format:check\": \"prettier --check .\",\n    \"tc\": \"tsc --noEmit\",\n    \"validate\": \"npm run tc && npm run format:check && npm run lint\",\n    \"clean\": \"rm -rf dist\",\n    \"prebuild\": \"npm run clean\",\n    \"dev:cli\": \"ts-node src/cli.ts\"\n  },\n  \"keywords\": [\n    \"ai\",\n    \"coding-assistant\",\n    \"typescript\",\n    \"cli\",\n    \"ollama\",\n    \"mcp\",\n    \"privacy\"\n  ],\n  \"author\": \"\",\n  \"license\": \"MIT\",\n  \"engines\": {\n    \"node\": \">=18.0.0\"\n  },\n  \"dependencies\": {\n    \"@modelcontextprotocol/sdk\": \"^0.4.0\",\n    \"@types/node\": \"^20.10.0\",\n    \"chalk\": \"^5.3.0\",\n    \"commander\": \"^11.1.0\",\n    \"fast-glob\": \"^3.3.2\",\n    \"is-path-in-cwd\": \"^4.0.0\",\n    \"micromatch\": \"^4.0.5\",\n    \"node-diff3\": \"^3.1.1\",\n    \"ollama\": \"^0.5.16\",\n    \"pathe\": \"^2.0.3\",\n    \"sanitize-filename\": \"^1.6.3\",\n    \"shell-escape\": \"^0.2.0\",\n    \"typescript\": \"^5.3.0\",\n    \"zod\": \"^3.22.4\",\n    \"zod-to-json-schema\": \"^3.22.4\"\n  },\n  \"devDependencies\": {\n    \"@types/jest\": \"^29.5.8\",\n    \"@types/micromatch\": \"^4.0.6\",\n    \"@types/nock\": \"^10.0.3\",\n    \"@types/shell-escape\": \"^0.2.3\",\n    \"@typescript-eslint/eslint-plugin\": \"^6.13.0\",\n    \"@typescript-eslint/parser\": \"^6.13.0\",\n    \"eslint\": \"^8.54.0\",\n    \"eslint-config-prettier\": \"^9.0.0\",\n    \"eslint-plugin-prettier\": \"^5.0.1\",\n    \"jest\": \"^29.7.0\",\n    \"nock\": \"^14.0.5\",\n    \"prettier\": \"^3.1.0\",\n    \"ts-jest\": \"^29.1.1\",\n    \"ts-node\": \"^10.9.1\"\n  }\n}\n\n```"
        },
        {
          "role": "user",
          "content": "Continue with the next step if needed to fully answer the original question."
        }
      ],
      "stream": false,
      "format": "json",
      "options": {
        "temperature": 0.1
      },
      "tools": [
        {
          "type": "function",
          "function": {
            "name": "internal:files",
            "description": "Perform file operations including read, write, list, and search files within the workspace",
            "parameters": {
              "type": "object",
              "properties": {
                "operation": {
                  "type": "string",
                  "enum": ["read", "write", "list", "search"],
                  "description": "The type of file operation to perform"
                },
                "path": {
                  "type": "string",
                  "description": "For read/write: file path. For list: directory path to search in (default: current directory)"
                },
                "content": {
                  "type": "string",
                  "description": "Content to write (for write operation)"
                },
                "query": {
                  "type": "string",
                  "description": "Search query text or pattern (for search operation)"
                },
                "pattern": {
                  "type": "string",
                  "description": "Glob pattern to filter files (e.g., \"**/*.ts\", \"*.swift\"). Use this to find files by extension or name pattern."
                },
                "startLine": {
                  "type": "number",
                  "description": "Starting line number for partial file read (1-indexed)"
                },
                "endLine": {
                  "type": "number",
                  "description": "Ending line number for partial file read (1-indexed, inclusive)"
                },
                "recursive": {
                  "type": "boolean",
                  "description": "Whether to search/list recursively in subdirectories",
                  "default": false
                },
                "includeHidden": {
                  "type": "boolean",
                  "description": "Whether to include hidden files (starting with .)",
                  "default": false
                },
                "includeMetadata": {
                  "type": "boolean",
                  "description": "Whether to include file metadata (size, dates, permissions)",
                  "default": false
                },
                "useRegex": {
                  "type": "boolean",
                  "description": "Whether to treat search query as a regular expression",
                  "default": false
                },
                "caseSensitive": {
                  "type": "boolean",
                  "description": "Whether search should be case sensitive",
                  "default": false
                },
                "backup": {
                  "type": "boolean",
                  "description": "Whether to create backup before overwriting files",
                  "default": true
                },
                "createDirs": {
                  "type": "boolean",
                  "description": "Whether to create parent directories if they don't exist",
                  "default": true
                },
                "encoding": {
                  "type": "string",
                  "enum": ["utf8", "utf-8", "ascii", "base64", "hex"],
                  "description": "File encoding for read/write operations",
                  "default": "utf8"
                },
                "maxResults": {
                  "type": "number",
                  "description": "Maximum number of search results to return",
                  "default": 100
                },
                "includeContext": {
                  "type": "boolean",
                  "description": "Whether to include context lines around search matches",
                  "default": true
                }
              },
              "required": ["operation"],
              "additionalProperties": false
            }
          }
        }
      ]
    },
    "status": 200,
    "response": {
      "model": "llama3.1:8b",
      "created_at": "2025-06-03T22:19:55.523984Z",
      "message": {
        "role": "assistant",
        "content": "",
        "tool_calls": [
          {
            "function": {
              "name": "internal:files",
              "arguments": {
                "operation": "list",
                "path": "src/",
                "pattern": "**/*.ts"
              }
            }
          }
        ]
      },
      "done_reason": "stop",
      "done": true,
      "total_duration": 4435409250,
      "load_duration": 11479000,
      "prompt_eval_count": 1601,
      "prompt_eval_duration": 3539726875,
      "eval_count": 31,
      "eval_duration": 880838167
    },
    "rawHeaders": {
      "content-length": "418",
      "content-type": "application/json; charset=utf-8",
      "date": "Tue, 03 Jun 2025 22:19:55 GMT"
    },
    "responseIsBinary": false
  },
  {
    "scope": "http://localhost:11434",
    "method": "POST",
    "path": "/api/chat",
    "body": {
      "model": "llama3.1:8b",
      "messages": [
        {
          "role": "system",
          "content": "You are QCode, an AI coding assistant. You have access to file operation tools to help users with their coding tasks.\n\nAvailable tools:\n- internal:files: Perform file operations including read, write, list, and search files within the workspace\n\nWhen a user asks about files, use the appropriate tool to help them. Always use function calling when file operations are needed.\n\nFor file paths, assume they are relative to the current workspace unless otherwise specified.\n\nIMPORTANT for the 'files' tool operations:\n- For list operation: Use 'path' parameter for the directory, 'pattern' for glob patterns like \"*.swift\", \"**/*.ts\"\n- For read operation: Use 'path' parameter for the file path, 'startLine' and 'endLine' for ranges\n- For search operation: Use 'pattern' for text/regex to search, 'path' for directory scope\n\nFor multi-step queries like \"list files and then read the first one\", break this down into steps:\n1. First, call the list function to get files\n2. Then, based on the results, call read function for a specific file\n\nContinue calling functions until the user's request is fully satisfied."
        },
        {
          "role": "user",
          "content": "\n          I need you to analyze this TypeScript project:\n          1. First, find and read package.json to understand dependencies\n          2. Then look at the source code structure in src/\n          3. Finally, give me a summary of the project architecture and any potential issues\n        "
        },
        {
          "role": "assistant",
          "content": "\n📄 **/Users/qmx/dev/qcode/package.json** (74 lines) (1945 bytes)\n```\n{\n  \"name\": \"qcode\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Enterprise-grade TypeScript-based AI coding assistant with zero API costs and full privacy control\",\n  \"main\": \"dist/index.js\",\n  \"bin\": {\n    \"qcode\": \"dist/cli.js\"\n  },\n  \"scripts\": {\n    \"build\": \"tsc\",\n    \"dev\": \"tsc --watch\",\n    \"start\": \"node dist/cli.js\",\n    \"test\": \"jest\",\n    \"test:watch\": \"jest --watch\",\n    \"test:coverage\": \"jest --coverage\",\n    \"lint\": \"eslint 'src/**/*.ts' --max-warnings 0\",\n    \"lint:fix\": \"eslint 'src/**/*.ts' --fix\",\n    \"format\": \"prettier --write .\",\n    \"format:check\": \"prettier --check .\",\n    \"tc\": \"tsc --noEmit\",\n    \"validate\": \"npm run tc && npm run format:check && npm run lint\",\n    \"clean\": \"rm -rf dist\",\n    \"prebuild\": \"npm run clean\",\n    \"dev:cli\": \"ts-node src/cli.ts\"\n  },\n  \"keywords\": [\n    \"ai\",\n    \"coding-assistant\",\n    \"typescript\",\n    \"cli\",\n    \"ollama\",\n    \"mcp\",\n    \"privacy\"\n  ],\n  \"author\": \"\",\n  \"license\": \"MIT\",\n  \"engines\": {\n    \"node\": \">=18.0.0\"\n  },\n  \"dependencies\": {\n    \"@modelcontextprotocol/sdk\": \"^0.4.0\",\n    \"@types/node\": \"^20.10.0\",\n    \"chalk\": \"^5.3.0\",\n    \"commander\": \"^11.1.0\",\n    \"fast-glob\": \"^3.3.2\",\n    \"is-path-in-cwd\": \"^4.0.0\",\n    \"micromatch\": \"^4.0.5\",\n    \"node-diff3\": \"^3.1.1\",\n    \"ollama\": \"^0.5.16\",\n    \"pathe\": \"^2.0.3\",\n    \"sanitize-filename\": \"^1.6.3\",\n    \"shell-escape\": \"^0.2.0\",\n    \"typescript\": \"^5.3.0\",\n    \"zod\": \"^3.22.4\",\n    \"zod-to-json-schema\": \"^3.22.4\"\n  },\n  \"devDependencies\": {\n    \"@types/jest\": \"^29.5.8\",\n    \"@types/micromatch\": \"^4.0.6\",\n    \"@types/nock\": \"^10.0.3\",\n    \"@types/shell-escape\": \"^0.2.3\",\n    \"@typescript-eslint/eslint-plugin\": \"^6.13.0\",\n    \"@typescript-eslint/parser\": \"^6.13.0\",\n    \"eslint\": \"^8.54.0\",\n    \"eslint-config-prettier\": \"^9.0.0\",\n    \"eslint-plugin-prettier\": \"^5.0.1\",\n    \"jest\": \"^29.7.0\",\n    \"nock\": \"^14.0.5\",\n    \"prettier\": \"^3.1.0\",\n    \"ts-jest\": \"^29.1.1\",\n    \"ts-node\": \"^10.9.1\"\n  }\n}\n\n```"
        },
        {
          "role": "user",
          "content": "Continue with the next step if needed to fully answer the original question."
        },
        {
          "role": "assistant",
          "content": "\n📂 **Files in /Users/qmx/dev/qcode/src/** (3 items)\n📄 cli.ts\n📄 index.ts\n📄 types.ts"
        },
        {
          "role": "user",
          "content": "Continue with the next step if needed to fully answer the original question."
        }
      ],
      "stream": false,
      "format": "json",
      "options": {
        "temperature": 0.1
      },
      "tools": [
        {
          "type": "function",
          "function": {
            "name": "internal:files",
            "description": "Perform file operations including read, write, list, and search files within the workspace",
            "parameters": {
              "type": "object",
              "properties": {
                "operation": {
                  "type": "string",
                  "enum": ["read", "write", "list", "search"],
                  "description": "The type of file operation to perform"
                },
                "path": {
                  "type": "string",
                  "description": "For read/write: file path. For list: directory path to search in (default: current directory)"
                },
                "content": {
                  "type": "string",
                  "description": "Content to write (for write operation)"
                },
                "query": {
                  "type": "string",
                  "description": "Search query text or pattern (for search operation)"
                },
                "pattern": {
                  "type": "string",
                  "description": "Glob pattern to filter files (e.g., \"**/*.ts\", \"*.swift\"). Use this to find files by extension or name pattern."
                },
                "startLine": {
                  "type": "number",
                  "description": "Starting line number for partial file read (1-indexed)"
                },
                "endLine": {
                  "type": "number",
                  "description": "Ending line number for partial file read (1-indexed, inclusive)"
                },
                "recursive": {
                  "type": "boolean",
                  "description": "Whether to search/list recursively in subdirectories",
                  "default": false
                },
                "includeHidden": {
                  "type": "boolean",
                  "description": "Whether to include hidden files (starting with .)",
                  "default": false
                },
                "includeMetadata": {
                  "type": "boolean",
                  "description": "Whether to include file metadata (size, dates, permissions)",
                  "default": false
                },
                "useRegex": {
                  "type": "boolean",
                  "description": "Whether to treat search query as a regular expression",
                  "default": false
                },
                "caseSensitive": {
                  "type": "boolean",
                  "description": "Whether search should be case sensitive",
                  "default": false
                },
                "backup": {
                  "type": "boolean",
                  "description": "Whether to create backup before overwriting files",
                  "default": true
                },
                "createDirs": {
                  "type": "boolean",
                  "description": "Whether to create parent directories if they don't exist",
                  "default": true
                },
                "encoding": {
                  "type": "string",
                  "enum": ["utf8", "utf-8", "ascii", "base64", "hex"],
                  "description": "File encoding for read/write operations",
                  "default": "utf8"
                },
                "maxResults": {
                  "type": "number",
                  "description": "Maximum number of search results to return",
                  "default": 100
                },
                "includeContext": {
                  "type": "boolean",
                  "description": "Whether to include context lines around search matches",
                  "default": true
                }
              },
              "required": ["operation"],
              "additionalProperties": false
            }
          }
        }
      ]
    },
    "status": 200,
    "response": {
      "model": "llama3.1:8b",
      "created_at": "2025-06-03T22:19:58.032915Z",
      "message": {
        "role": "assistant",
        "content": "",
        "tool_calls": [
          {
            "function": {
              "name": "internal:files",
              "arguments": {
                "operation": "list",
                "path": "/Users/qmx/dev/qcode/src/"
              }
            }
          }
        ]
      },
      "done_reason": "stop",
      "done": true,
      "total_duration": 2503244083,
      "load_duration": 14942542,
      "prompt_eval_count": 1661,
      "prompt_eval_duration": 1687831459,
      "eval_count": 31,
      "eval_duration": 795963041
    },
    "rawHeaders": {
      "content-length": "419",
      "content-type": "application/json; charset=utf-8",
      "date": "Tue, 03 Jun 2025 22:19:58 GMT"
    },
    "responseIsBinary": false
  },
  {
    "scope": "http://localhost:11434",
    "method": "POST",
    "path": "/api/chat",
    "body": {
      "model": "llama3.1:8b",
      "messages": [
        {
          "role": "system",
          "content": "You are QCode, an AI coding assistant. You have access to file operation tools to help users with their coding tasks.\n\nAvailable tools:\n- internal:files: Perform file operations including read, write, list, and search files within the workspace\n\nWhen a user asks about files, use the appropriate tool to help them. Always use function calling when file operations are needed.\n\nFor file paths, assume they are relative to the current workspace unless otherwise specified.\n\nIMPORTANT for the 'files' tool operations:\n- For list operation: Use 'path' parameter for the directory, 'pattern' for glob patterns like \"*.swift\", \"**/*.ts\"\n- For read operation: Use 'path' parameter for the file path, 'startLine' and 'endLine' for ranges\n- For search operation: Use 'pattern' for text/regex to search, 'path' for directory scope\n\nFor multi-step queries like \"list files and then read the first one\", break this down into steps:\n1. First, call the list function to get files\n2. Then, based on the results, call read function for a specific file\n\nContinue calling functions until the user's request is fully satisfied."
        },
        {
          "role": "user",
          "content": "\n          I need you to analyze this TypeScript project:\n          1. First, find and read package.json to understand dependencies\n          2. Then look at the source code structure in src/\n          3. Finally, give me a summary of the project architecture and any potential issues\n        "
        },
        {
          "role": "assistant",
          "content": "\n📄 **/Users/qmx/dev/qcode/package.json** (74 lines) (1945 bytes)\n```\n{\n  \"name\": \"qcode\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Enterprise-grade TypeScript-based AI coding assistant with zero API costs and full privacy control\",\n  \"main\": \"dist/index.js\",\n  \"bin\": {\n    \"qcode\": \"dist/cli.js\"\n  },\n  \"scripts\": {\n    \"build\": \"tsc\",\n    \"dev\": \"tsc --watch\",\n    \"start\": \"node dist/cli.js\",\n    \"test\": \"jest\",\n    \"test:watch\": \"jest --watch\",\n    \"test:coverage\": \"jest --coverage\",\n    \"lint\": \"eslint 'src/**/*.ts' --max-warnings 0\",\n    \"lint:fix\": \"eslint 'src/**/*.ts' --fix\",\n    \"format\": \"prettier --write .\",\n    \"format:check\": \"prettier --check .\",\n    \"tc\": \"tsc --noEmit\",\n    \"validate\": \"npm run tc && npm run format:check && npm run lint\",\n    \"clean\": \"rm -rf dist\",\n    \"prebuild\": \"npm run clean\",\n    \"dev:cli\": \"ts-node src/cli.ts\"\n  },\n  \"keywords\": [\n    \"ai\",\n    \"coding-assistant\",\n    \"typescript\",\n    \"cli\",\n    \"ollama\",\n    \"mcp\",\n    \"privacy\"\n  ],\n  \"author\": \"\",\n  \"license\": \"MIT\",\n  \"engines\": {\n    \"node\": \">=18.0.0\"\n  },\n  \"dependencies\": {\n    \"@modelcontextprotocol/sdk\": \"^0.4.0\",\n    \"@types/node\": \"^20.10.0\",\n    \"chalk\": \"^5.3.0\",\n    \"commander\": \"^11.1.0\",\n    \"fast-glob\": \"^3.3.2\",\n    \"is-path-in-cwd\": \"^4.0.0\",\n    \"micromatch\": \"^4.0.5\",\n    \"node-diff3\": \"^3.1.1\",\n    \"ollama\": \"^0.5.16\",\n    \"pathe\": \"^2.0.3\",\n    \"sanitize-filename\": \"^1.6.3\",\n    \"shell-escape\": \"^0.2.0\",\n    \"typescript\": \"^5.3.0\",\n    \"zod\": \"^3.22.4\",\n    \"zod-to-json-schema\": \"^3.22.4\"\n  },\n  \"devDependencies\": {\n    \"@types/jest\": \"^29.5.8\",\n    \"@types/micromatch\": \"^4.0.6\",\n    \"@types/nock\": \"^10.0.3\",\n    \"@types/shell-escape\": \"^0.2.3\",\n    \"@typescript-eslint/eslint-plugin\": \"^6.13.0\",\n    \"@typescript-eslint/parser\": \"^6.13.0\",\n    \"eslint\": \"^8.54.0\",\n    \"eslint-config-prettier\": \"^9.0.0\",\n    \"eslint-plugin-prettier\": \"^5.0.1\",\n    \"jest\": \"^29.7.0\",\n    \"nock\": \"^14.0.5\",\n    \"prettier\": \"^3.1.0\",\n    \"ts-jest\": \"^29.1.1\",\n    \"ts-node\": \"^10.9.1\"\n  }\n}\n\n```"
        },
        {
          "role": "user",
          "content": "Continue with the next step if needed to fully answer the original question."
        },
        {
          "role": "assistant",
          "content": "\n📂 **Files in /Users/qmx/dev/qcode/src/** (3 items)\n📄 cli.ts\n📄 index.ts\n📄 types.ts"
        },
        {
          "role": "user",
          "content": "Continue with the next step if needed to fully answer the original question."
        },
        {
          "role": "assistant",
          "content": "\n📂 **Files in /Users/qmx/dev/qcode/src/** (10 items)\n📁 cli\n📁 config\n📁 core\n📁 mcp\n📁 security\n📁 tools\n📁 types\n📄 cli.ts\n📄 index.ts\n📄 types.ts"
        },
        {
          "role": "user",
          "content": "Continue with the next step if needed to fully answer the original question."
        }
      ],
      "stream": false,
      "format": "json",
      "options": {
        "temperature": 0.1
      },
      "tools": [
        {
          "type": "function",
          "function": {
            "name": "internal:files",
            "description": "Perform file operations including read, write, list, and search files within the workspace",
            "parameters": {
              "type": "object",
              "properties": {
                "operation": {
                  "type": "string",
                  "enum": ["read", "write", "list", "search"],
                  "description": "The type of file operation to perform"
                },
                "path": {
                  "type": "string",
                  "description": "For read/write: file path. For list: directory path to search in (default: current directory)"
                },
                "content": {
                  "type": "string",
                  "description": "Content to write (for write operation)"
                },
                "query": {
                  "type": "string",
                  "description": "Search query text or pattern (for search operation)"
                },
                "pattern": {
                  "type": "string",
                  "description": "Glob pattern to filter files (e.g., \"**/*.ts\", \"*.swift\"). Use this to find files by extension or name pattern."
                },
                "startLine": {
                  "type": "number",
                  "description": "Starting line number for partial file read (1-indexed)"
                },
                "endLine": {
                  "type": "number",
                  "description": "Ending line number for partial file read (1-indexed, inclusive)"
                },
                "recursive": {
                  "type": "boolean",
                  "description": "Whether to search/list recursively in subdirectories",
                  "default": false
                },
                "includeHidden": {
                  "type": "boolean",
                  "description": "Whether to include hidden files (starting with .)",
                  "default": false
                },
                "includeMetadata": {
                  "type": "boolean",
                  "description": "Whether to include file metadata (size, dates, permissions)",
                  "default": false
                },
                "useRegex": {
                  "type": "boolean",
                  "description": "Whether to treat search query as a regular expression",
                  "default": false
                },
                "caseSensitive": {
                  "type": "boolean",
                  "description": "Whether search should be case sensitive",
                  "default": false
                },
                "backup": {
                  "type": "boolean",
                  "description": "Whether to create backup before overwriting files",
                  "default": true
                },
                "createDirs": {
                  "type": "boolean",
                  "description": "Whether to create parent directories if they don't exist",
                  "default": true
                },
                "encoding": {
                  "type": "string",
                  "enum": ["utf8", "utf-8", "ascii", "base64", "hex"],
                  "description": "File encoding for read/write operations",
                  "default": "utf8"
                },
                "maxResults": {
                  "type": "number",
                  "description": "Maximum number of search results to return",
                  "default": 100
                },
                "includeContext": {
                  "type": "boolean",
                  "description": "Whether to include context lines around search matches",
                  "default": true
                }
              },
              "required": ["operation"],
              "additionalProperties": false
            }
          }
        }
      ]
    },
    "status": 200,
    "response": {
      "model": "llama3.1:8b",
      "created_at": "2025-06-03T22:20:01.341331Z",
      "message": {
        "role": "assistant",
        "content": "",
        "tool_calls": [
          {
            "function": {
              "name": "internal:files",
              "arguments": {
                "encoding": "utf8",
                "endLine": 10,
                "operation": "read",
                "path": "/Users/qmx/dev/qcode/src/index.ts",
                "startLine": 1
              }
            }
          }
        ]
      },
      "done_reason": "stop",
      "done": true,
      "total_duration": 3304228916,
      "load_duration": 10918041,
      "prompt_eval_count": 1757,
      "prompt_eval_duration": 1753952000,
      "eval_count": 53,
      "eval_duration": 1534520250
    },
    "rawHeaders": {
      "content-length": "473",
      "content-type": "application/json; charset=utf-8",
      "date": "Tue, 03 Jun 2025 22:20:01 GMT"
    },
    "responseIsBinary": false
  }
]
