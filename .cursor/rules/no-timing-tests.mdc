---
description:
globs:
alwaysApply: false
---
# Testing Guidelines - Avoid Timing Tests

## DO NOT create timing/performance tests unless absolutely necessary

**Avoid these patterns:**
- Tests that assert specific execution duration values (`expect(result.duration).toBeGreaterThan(0)`)
- Tests that measure millisecond-level performance
- Tests that depend on execution speed
- Fragile timing assertions that can fail based on system load

**DO assert on data types and structure:**
- `expect(typeof result.duration).toBe('number')` ✅
- `expect(typeof result.size).toBe('number')` ✅
- `expect(Array.isArray(result.items)).toBe(true)` ✅
- `expect(result.count).toBeGreaterThanOrEqual(0)` ✅ (logical constraint)

**Instead focus on:**
- Functional correctness (does it work?)
- Error handling (does it fail gracefully?)
- Security validation (are boundaries enforced?)
- Data validation (are inputs/outputs correct?)
- Integration behavior (do components work together?)

**Exception:** Only create timing tests when:
- Testing actual performance requirements (e.g., must complete within 5 seconds)
- Testing timeout behavior
- Testing rate limiting
- Performance is a critical business requirement

**Good vs Bad examples:**
```typescript
// Good: Type checking and logical constraints
expect(typeof result.duration).toBe('number');
expect(result.count).toBeGreaterThanOrEqual(0);
expect(result.files).toHaveLength(3);

// Bad: Specific timing assertions
expect(result.duration).toBeGreaterThan(0); // Can fail on fast systems
expect(result.duration).toBeLessThan(100); // Brittle
```

**Focus on value and correctness, not micro-timing.**
